#!/usr/bin/env node

// index.ts
import { writeFileSync } from "fs";
import path from "path";

// src/options.ts
import prompts from "prompts";
import {
  blue,
  cyan,
  lightRed,
  magenta,
  red,
  reset,
  yellow
} from "kolorist";

// src/utils.ts
function withComment(content) {
  return `# ${content}`;
}
function withNewLine(content) {
  return `\r${content}`;
}
function Sign() {
  return withComment("generated by @alexzhang1030/gi");
}
function isBasic(type2) {
  return type2 === "basic";
}

// data/basic.ts
var forNpmPack = [
  withNewLine(withComment("Output of 'npm pack'")),
  "*.tgz"
];
var basic = [
  "node_modules",
  ".DS_Store",
  "npm-debug.log*",
  ".pnpm-debug.log*",
  "yarn-debug.log*",
  "yarn-error.log*",
  ...forNpmPack
];

// data/node.ts
var node = [
  "logs",
  "*.log"
];

// data/index.ts
function getAllData() {
  return {
    basic,
    node
  };
}

// src/options.ts
var AllData = getAllData();
async function options() {
  const response = await prompts({
    type: "select",
    name: "type",
    message: "\u9009\u62E9\u4E00\u79CD gitignore \u6A21\u677F",
    choices: (() => {
      const choices = [];
      const files = Object.keys(AllData);
      const colors = [
        yellow,
        cyan,
        blue,
        magenta,
        lightRed,
        red,
        reset
      ];
      files.forEach((f, i) => {
        const name = f.split(".")[0];
        let color;
        if (i >= colors.length)
          color = colors[i % colors.length];
        else
          color = colors[i];
        choices.push({
          title: color(name),
          value: name
        });
      });
      return choices;
    })()
  });
  return response;
}

// src/content.ts
var data = getAllData();
function getContent(type2) {
  let content = data[type2];
  if (!isBasic(type2)) {
    const basic2 = getBasic();
    content = basic2.concat(content);
  }
  content.unshift(Sign());
  return content.join("\n");
}
function getBasic() {
  return data.basic;
}

// index.ts
var __dirname2 = path.resolve();
var fileName = ".gitignore";
var fullPath = path.resolve(__dirname2, fileName);
var { type } = await options();
await create(fullPath);
async function create(path2) {
  try {
    writeFileSync(path2, await getContent(type));
    console.log("\n .gitignore is generated successfully! \u{1F389}");
  } catch (error) {
    console.log(`looks like something wrong: ${error}`);
  }
}
//# sourceMappingURL=index.js.map